{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fbalsas\\\\eclipse-workspace\\\\Tabla\\\\personapi-ba\\\\personapi-fr\\\\src\\\\pages\\\\PeopleList.jsx\";\nimport React from 'react';\nimport Container, { ModalConsumer } from \"../components/Container/Container\";\nimport { Table } from \"../components/Table/Table\";\nimport { peopleListLabels } from \"../constants/peopleData\";\nimport { connect } from 'react-redux';\nimport { myRequest } from \"../services/mockEmployeersService\";\nimport { DELETE_PEOPLE_FAIL, DELETE_PEOPLE_REQUEST, DELETE_PEOPLE_SUCCESS, GET_PEOPLE_FAIL, GET_PEOPLE_REQUEST, GET_PEOPLE_SUCCESS } from \"../redux/reducers/people\";\nimport { deletePerson, getPeople } from \"../services/peopleService\";\n\nclass PeopleListComponent extends React.Component {\n  componentDidMount() {\n    this.props.getPeopleRequest();\n    getPeople().then(value => {\n      this.props.getPeopleSuccess({\n        data: value\n      });\n    }).catch(error => {\n      this.props.getPeopleFail({\n        error: error\n      });\n    });\n  }\n\n  deletePerson(id) {\n    this.props.deletePeopleRequest();\n    deletePerson(id, 'http://localhost:8080/personAPI/employees').then(() => {\n      this.props.deletePeopleSuccess(id);\n      alert(\"Person with id: \" + id + \" deleted correctly\");\n    }).catch(error => {\n      this.props.deletePeopleFail({\n        error: error\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(ModalConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, ({\n      toggleModal\n    }) => React.createElement(React.Fragment, null, React.createElement(Table, {\n      dataLabels: peopleListLabels,\n      data: this.props.data,\n      onDelete: id => toggleModal(true, null, () => this.deletePerson(id))(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }))), this.props.error && 'the request has been failed');\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: state.people.data,\n  error: state.people.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPeopleRequest: () => dispatch({\n    type: GET_PEOPLE_REQUEST\n  }),\n  getPeopleSuccess: response => dispatch({\n    type: GET_PEOPLE_SUCCESS,\n    response: response\n  }),\n  getPeopleFail: response => dispatch({\n    type: GET_PEOPLE_FAIL,\n    response: response\n  }),\n  deletePeopleRequest: () => dispatch({\n    type: DELETE_PEOPLE_REQUEST\n  }),\n  deletePeopleSuccess: id => dispatch({\n    type: DELETE_PEOPLE_SUCCESS,\n    id: id\n  }),\n  deletePeopleFail: response => dispatch({\n    type: DELETE_PEOPLE_FAIL,\n    response: response\n  })\n});\n\nexport const PeopleList = connect(mapStateToProps, mapDispatchToProps)(PeopleListComponent);","map":{"version":3,"sources":["C:\\Users\\fbalsas\\eclipse-workspace\\Tabla\\personapi-ba\\personapi-fr\\src\\pages\\PeopleList.jsx"],"names":["React","Container","ModalConsumer","Table","peopleListLabels","connect","myRequest","DELETE_PEOPLE_FAIL","DELETE_PEOPLE_REQUEST","DELETE_PEOPLE_SUCCESS","GET_PEOPLE_FAIL","GET_PEOPLE_REQUEST","GET_PEOPLE_SUCCESS","deletePerson","getPeople","PeopleListComponent","Component","componentDidMount","props","getPeopleRequest","then","value","getPeopleSuccess","data","catch","error","getPeopleFail","id","deletePeopleRequest","deletePeopleSuccess","alert","deletePeopleFail","render","toggleModal","mapStateToProps","state","people","mapDispatchToProps","dispatch","type","response","PeopleList"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Container, {ModalConsumer} from \"../components/Container/Container\";\r\nimport {Table} from \"../components/Table/Table\";\r\nimport {peopleListLabels} from \"../constants/peopleData\";\r\nimport {connect} from 'react-redux';\r\nimport {myRequest} from \"../services/mockEmployeersService\";\r\nimport {\r\n    DELETE_PEOPLE_FAIL,\r\n    DELETE_PEOPLE_REQUEST,\r\n    DELETE_PEOPLE_SUCCESS,\r\n    GET_PEOPLE_FAIL,\r\n    GET_PEOPLE_REQUEST,\r\n    GET_PEOPLE_SUCCESS\r\n} from \"../redux/reducers/people\";\r\nimport {deletePerson, getPeople} from \"../services/peopleService\";\r\n\r\nclass PeopleListComponent extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getPeopleRequest();\r\n        getPeople()\r\n            .then(value => {\r\n                this.props.getPeopleSuccess({data: value});\r\n            })\r\n            .catch(error => {\r\n                this.props.getPeopleFail({error: error})\r\n            })\r\n    }\r\n\r\n    deletePerson(id){\r\n        this.props.deletePeopleRequest();\r\n        deletePerson(id, 'http://localhost:8080/personAPI/employees')\r\n            .then(() =>\r\n            {\r\n                this.props.deletePeopleSuccess(id);\r\n                alert(\"Person with id: \" + id + \" deleted correctly\")\r\n            })\r\n            .catch(error => {this.props.deletePeopleFail({error: error})})\r\n    }\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <ModalConsumer>\r\n                {({toggleModal}) => (\r\n                    <>\r\n                        <Table\r\n                            dataLabels={peopleListLabels}\r\n                            data={this.props.data}\r\n                            onDelete={ (id) => toggleModal(true, null, () => this.deletePerson(id))()}\r\n                        />\r\n                    </>\r\n                )}\r\n                </ModalConsumer>\r\n                {this.props.error && 'the request has been failed'}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n   data: state.people.data,\r\n    error: state.people.error\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getPeopleRequest: () => dispatch({type: GET_PEOPLE_REQUEST}),\r\n    getPeopleSuccess: (response) => dispatch({type: GET_PEOPLE_SUCCESS, response: response}),\r\n    getPeopleFail: (response) => dispatch({type: GET_PEOPLE_FAIL, response: response}),\r\n    deletePeopleRequest: () => dispatch({type: DELETE_PEOPLE_REQUEST}),\r\n    deletePeopleSuccess: (id) => dispatch({type: DELETE_PEOPLE_SUCCESS, id: id}),\r\n    deletePeopleFail: (response) => dispatch({type: DELETE_PEOPLE_FAIL, response: response}),\r\n});\r\n\r\nexport const PeopleList = connect(mapStateToProps, mapDispatchToProps)(PeopleListComponent);\r\n"]},"metadata":{},"sourceType":"module"}